mod contract;
pub use contract::NFContract;

use std::{convert::TryFrom, io::Read};
use std::fs::File;
use std::sync::Arc;

use ethers::{providers::{Http, Provider}};
use ethers::prelude::*;
use ethers_core::{abi::Abi, types::{Address, U256, H160}};

use serde_json::{self, Number, Value};
use std::fmt::Debug;



const factory_contract_addr : &str = "0x633f543df238e88e41cd6e660223c76788158371";

/// This event is generated by the contract when the value is changed.
/// For `simple_storage.sol`, this corresponds to the `ValueChanged` event.
#[derive(Default, Debug, Clone, EthEvent)]
pub struct ValueChanged {
    pub new_value: U256,
}

fn handler(name: String, new_value: ValueChanged) {
    println!("Handler {}: {:?}", name, new_value);
}



#[cfg(test)]
mod tests {
    use super::*;

    fn load_abi() -> Result<Abi, Box<dyn std::error::Error>> {
        println!("ABI:");
        let mut file = File::open("/home/preston/DEV/Smart-Contract-Insurance/build/contracts/SimpleStorage.json")?;
        let mut file_str = String::new();
        file.read_to_string(&mut file_str);

        let mut contract_json = serde_json::from_str::<Value>(&file_str).unwrap();

        let abi: Abi = serde_json::from_value(contract_json["abi"].take()).unwrap();
        // println!("ABI: {:?}", abi);
        Ok(abi)
    }


    #[test]
    fn simple_storage_event() {
        let provider = Provider::<Http>::try_from("http://localhost:8545").unwrap();

        let contract_addr = match factory_contract_addr.parse::<Address>() {
            Ok(addr) => addr,
            Err(e) => panic!("Unable to parse address: {:?}", e),
        };
        println!("Contract address: {:?}", contract_addr);	

        let abi: Abi = load_abi().unwrap();
        let val_changed_event = ValueChanged::default();
	    if let Ok(mut nf_contract) = NFContract::<ValueChanged>::new(contract_addr, abi, &provider) {
            nf_contract.register_event_handler("test_handler".to_string(), val_changed_event, Box::new(handler));
            tokio::runtime::Builder::new_current_thread()
                .enable_all()
                .build()
                .unwrap()
                .block_on(async {
                    nf_contract.event_loop().await.unwrap();
                });
        }

    }
}
